// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: state/v1/state.proto

package statev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/inngest/inngest/proto/gen/state/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StateServiceName is the fully-qualified name of the StateService service.
	StateServiceName = "state.v1.StateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StateServiceCreateProcedure is the fully-qualified name of the StateService's Create RPC.
	StateServiceCreateProcedure = "/state.v1.StateService/Create"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	stateServiceServiceDescriptor      = v1.File_state_v1_state_proto.Services().ByName("StateService")
	stateServiceCreateMethodDescriptor = stateServiceServiceDescriptor.Methods().ByName("Create")
)

// StateServiceClient is a client for the state.v1.StateService service.
type StateServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
}

// NewStateServiceClient constructs a client for the state.v1.StateService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stateServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+StateServiceCreateProcedure,
			connect.WithSchema(stateServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// stateServiceClient implements StateServiceClient.
type stateServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
}

// Create calls state.v1.StateService.Create.
func (c *stateServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// StateServiceHandler is an implementation of the state.v1.StateService service.
type StateServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
}

// NewStateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateServiceHandler(svc StateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stateServiceCreateHandler := connect.NewUnaryHandler(
		StateServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(stateServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/state.v1.StateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateServiceCreateProcedure:
			stateServiceCreateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStateServiceHandler struct{}

func (UnimplementedStateServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("state.v1.StateService.Create is not implemented"))
}
